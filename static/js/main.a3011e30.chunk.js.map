{"version":3,"sources":["components/Header.jsx","components/ServiceCard.jsx","components/ServiceModal.jsx","services/stationServices.js","components/LoadingModal.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","ServiceCard","props","Card","style","margin","boxShadow","Body","Title","service","Destination1","$","name","Text","Origin1","ArriveTime","time","DepartTime","ServiceStatus","Status","Delay","Minutes","Platform","Number","Button","onClick","value","index","ServiceModal","Modal","show","onHide","centered","closeButton","stops","Dest1CallingPoints","NumCallingPoints","CallingPoint","map","stop","key","etarr","Name","push","showStops","getStations","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","stationsArray","wrap","_context","prev","next","fetch","then","results","json","data","abrupt","apply","this","arguments","getStationInformation","_ref2","_callee2","stationCode","stationInformation","_context2","concat","response","stationInfo","_x","LoadingModal","visible","textAlign","Spinner","animation","variant","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selectedStation","selectedService","showStationModal","showLoadingModal","handleChange","bind","assertThisInitialized","handleSubmit","viewStops","handleModalClose","stations","station","code","setState","event","preventDefault","info","StationBoard","Service","target","_this2","services","components_ServiceCard","components_Header","components_ServiceModal","components_LoadingModal","Container","Row","Col","md","span","offset","Form","onSubmit","Group","Label","Control","as","onChange","required","disabled","selected","hidden","type","renderServices","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3011e30.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nconst Header = () => {\n  return (\n    <Navbar bg='light' expand='lg'>\n      <Navbar.Brand href='/'>Translink Trains</Navbar.Brand>\n      <Navbar.Toggle aria-controls='basic-navbar-nav' />\n      <Navbar.Collapse id='basic-navbar-nav'>\n        <Nav className='mr-auto'>\n          <Nav.Link href='https://github.com/HundredPercentCoverage'>GitHub</Nav.Link>\n          <Nav.Link href='http://twitter.com/'>Twitter</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { Card, Button } from 'react-bootstrap';\n\nconst ServiceCard = (props) => {\n  return (\n    <Card style={{ margin: \"10px 0 10px 0\", boxShadow: \"2px 4px 4px #888888\"}}>\n      <Card.Body>\n        <Card.Title>\n          Destination: {props.service.Destination1.$.name}\n        </Card.Title>\n        <Card.Text>\n          Origin: {props.service.Origin1.$.name}\n          <br />\n          Due: {props.service.ArriveTime.$.time}\n          <br />\n          Departing: {props.service.DepartTime.$.time}\n          <br />\n          Status: {props.service.ServiceStatus.$.Status}\n          <br />\n          Delay: {props.service.Delay.$.Minutes} minutes\n          <br />\n          Platform: {props.service.Platform.$.Number}\n          <br />\n        </Card.Text>\n        <Button onClick={props.onClick} value={props.index}>View Stops</Button>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default ServiceCard;","import React from 'react';\nimport { Modal } from 'react-bootstrap';\n\nconst showStops = (service) => {\n  let stops =[];\n\n  if(+service.Dest1CallingPoints.$.NumCallingPoints > 1) {\n    stops = service.Dest1CallingPoints.CallingPoint.map((stop, index) => {\n        return (\n          <div key={index}>{stop.$.etarr} - {stop.$.Name}</div>\n        );\n      }\n    );\n  } else if(+service.Dest1CallingPoints.$.NumCallingPoints === 1) {\n    stops = [<div key=\"onlystop\">{service.Dest1CallingPoints.CallingPoint.$.etarr} - {service.Dest1CallingPoints.CallingPoint.$.Name}</div>];\n  }\n\n  stops.push(<div key=\"destination\">{service.Destination1.$.etarr} - {service.Destination1.$.name}</div>)\n\n  return stops;\n}\n\nconst ServiceModal = (props) => {\n  return (\n    <Modal show={props.show} onHide={props.onHide} centered>\n      <Modal.Header closeButton>\n        <Modal.Title>{props.service.Destination1.$.name}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {showStops(props.service)}\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nexport default ServiceModal;","// import { xml2json } from 'xml-js';\n\nexport const getStations = async () => {\n  let stationsArray;\n    // cors.io version - only use if cors.io is working\n    // await fetch(\"https://cors.io/?https://apis.opendatani.gov.uk/translink/\")\n    //   .then(results => {\n    //     return results.json();\n    //   })\n    //   .then(data => {\n    //     stationsArray = data.stations;\n    //   });\n\n    // Lroxy version - proxy must be running\n    // await fetch(\"/stations\")\n    //   .then(results => { return results.json(); })\n    //   .then(data => { stationsArray = data; });\n\n    // Heroku proxy version\n    await fetch(\"https://translink-proxy.herokuapp.com/stations\")\n      .then(results => { return results.json(); })\n      .then(data => { stationsArray = data; });\n\n    return stationsArray;\n}\n\nexport const getStationInformation = async (stationCode) => {\n  let stationInformation;\n\n  // cors.io version - only use if cors.io is working\n  // await fetch(\n  //   `https://cors.io/?https://apis.opendatani.gov.uk/translink/${stationCode}.xml`,\n  //   {\n  //     method: \"GET\",\n  //     headers: {\n  //       Accept: \"application/xml\"\n  //     }\n  //   }\n  // ).then(response => {\n  //     return response.text();\n  //   }\n  // ).then(xml => {\n  //     // console.log(xml);\n  //     stationInformation = JSON.parse(\n  //       xml2json(xml, {\n  //         compact: true,\n  //         textKey: \"_\",\n  //         attributesKey: \"$\",\n  //         commentKey: \"value\"\n  //       })\n  //     );\n  //   }\n  // );\n\n  // Local call (proxy must be running)\n  // await fetch(`/station/${stationCode}`)\n  //   .then(response => { return response.json() })\n  //   .then(stationInfo => { stationInformation = stationInfo });\n\n  // Heroku proxy version\n   await fetch(`https://translink-proxy.herokuapp.com/station/${stationCode}`)\n    .then(response => { return response.json() })\n    .then(stationInfo => { stationInformation = stationInfo });\n\n  return stationInformation;\n}","import React from 'react';\nimport { Modal, Spinner } from 'react-bootstrap';\n\nconst LoadingModal = (props) => {\n  return (\n    <Modal show={props.visible} centered>\n      <Modal.Body>\n        <p style={{ textAlign: \"center\" }}>\n          <Spinner animation=\"border\" variant=\"primary\"></Spinner>\n        </p>\n        <p style={{ textAlign: \"center\" }}>\n          Loading\n        </p>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nexport default LoadingModal;","import React, { Component } from \"react\";\nimport Header from './components/Header';\nimport { Form, Button, Container, Row, Col } from \"react-bootstrap\";\nimport ServiceCard from \"./components/ServiceCard\";\nimport ServiceModal from \"./components/ServiceModal\";\nimport { getStations, getStationInformation } from \"./services/stationServices\";\nimport LoadingModal from \"./components/LoadingModal\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedStation: \"None selected\",\n      stationInformation: \"\",\n      selectedService: null,\n      showStationModal: false,\n      showLoadingModal: true\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.viewStops = this.viewStops.bind(this);\n    this.handleModalClose = this.handleModalClose.bind(this);\n  }\n\n  async componentDidMount() {\n    let stations = await getStations(); // Try this with GH Pages\n    stations = await stations.map((station, index) => {\n      return (\n        <option key={index} value={station.code}>\n          {station.name}\n        </option>\n      );\n    });\n\n    this.setState({\n      stations: stations,\n      showLoadingModal: false\n    });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    this.setState({ showLoadingModal: true });\n    const info = await getStationInformation(this.state.selectedStation);\n\n    this.setState({\n      stationInformation: info,\n      showLoadingModal: false\n    });\n  }\n\n  viewStops(event) {\n    this.setState({ selectedService: this.state.stationInformation.StationBoard.Service[event.target.value] });\n    this.setState({ showStationModal: true });\n  }\n\n  handleModalClose() {\n    this.setState({ showStationModal: false });\n  }\n\n  renderServices() {\n    const services = this.state.stationInformation.StationBoard.Service;\n    let serviceElements;\n\n    if (services) {\n      serviceElements = services.map((service, index) => {\n        return (\n          <ServiceCard key={index} service={service} onClick={this.viewStops} index={index} />\n        );\n      });\n    } else {\n      serviceElements = <p className=\"noTrains\">No trains due here for at least 90min.</p>\n    }\n\n    return serviceElements;\n  }\n\n  handleChange(event) {\n    this.setState({ selectedStation: event.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        {this.state.selectedService &&\n          <ServiceModal service={this.state.selectedService} show={this.state.showStationModal} onHide={this.handleModalClose} />\n        }\n        <LoadingModal visible={this.state.showLoadingModal} />\n        <Container>\n          <Row>\n            <Col md={{ span: 8, offset: 2 }}>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Group style={{ textAlign: \"center\" }}>\n                  <Form.Label>Choose your station...</Form.Label>\n                  <Form.Control as=\"select\" onChange={this.handleChange} required>\n                    <option disabled selected hidden>Please select...</option>\n                    {this.state.stations}\n                  </Form.Control>\n                </Form.Group>\n                <Row>\n                  <Col />\n                  <Col className=\"text-center\">\n                    <Button variant=\"primary\" type=\"submit\">\n                      Submit\n                    </Button>\n                  </Col>\n                  <Col />\n                </Row>\n              </Form>\n            </Col>\n          </Row>\n          <Row>\n            <Col md={{ span: 8, offset: 2 }}>\n              {this.state.stationInformation.StationBoard && (\n                <div>{this.renderServices()}</div>\n              )}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}