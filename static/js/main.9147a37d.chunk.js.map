{"version":3,"sources":["components/Header.jsx","components/ServiceCard.jsx","components/ServiceModal.jsx","services/stationServices.js","components/LoadingModal.jsx","components/StationSelectForm.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","ServiceCard","props","Card","onClick","service","value","index","Body","Text","Row","Col","xs","Destination1","$","name","style","paddingLeft","ServiceStatus","Status","textAlign","color","ExpectedDepartTime","time","DepartTime","ServiceModal","Modal","show","onHide","centered","closeButton","Title","stops","Dest1CallingPoints","NumCallingPoints","CallingPoint","map","stop","key","etarr","Name","push","showStops","getStations","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","stationsArray","wrap","_context","prev","next","fetch","then","results","ok","json","Error","data","catch","error","abrupt","apply","this","arguments","getStationInformation","_ref2","_callee2","stationCode","stationInformation","_context2","concat","response","stationInfo","_x","LoadingModal","visible","Spinner","animation","variant","StationSelectForm","Form","onSubmit","Group","Label","Control","as","onChange","required","stations","station","code","Button","type","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selectedStation","selectedService","showStationModal","showLoadingModal","proxyDown","handleChange","bind","assertThisInitialized","handleSubmit","viewStops","handleModalClose","length","setState","event","preventDefault","info","serviceElements","_this2","StationBoard","Service","services","components_ServiceCard","target","components_Header","components_LoadingModal","Container","md","span","offset","components_StationSelectForm","renderServices","components_ServiceModal","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9147a37d.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nconst Header = () => {\n  return (\n    <Navbar bg='light' expand='lg'>\n      <Navbar.Brand href='/'>Translink Trains</Navbar.Brand>\n      <Navbar.Toggle aria-controls='basic-navbar-nav' />\n      <Navbar.Collapse id='basic-navbar-nav'>\n        <Nav className='mr-auto'>\n          <Nav.Link href='https://github.com/HundredPercentCoverage'>GitHub</Nav.Link>\n          <Nav.Link href='http://twitter.com/'>Twitter</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { Card, Row, Col } from 'react-bootstrap';\n\nconst ServiceCard = (props) => {\n  return (\n    <Card className=\"servicecard\" onClick={() => props.onClick(props.service)} value={props.index}>\n      <Card.Body>\n        <Card.Text>\n          <Row>\n            <Col xs={6}>\n              <span>{props.service.Destination1.$.name}</span>\n            </Col>\n            <Col xs={3} style={{ paddingLeft: 'inherit' }}>\n              <span>{props.service.ServiceStatus.$.Status}</span>\n            </Col>\n            <Col xs={3} style={{ textAlign: \"center\" }}>\n              {(props.service.ServiceStatus.$.Status === \"Delayed\") ?\n                <span style={{ color: \"red\" }}>{props.service.ExpectedDepartTime.$.time}</span>\n              :\n                <span>{props.service.DepartTime.$.time}</span>\n              }\n            </Col>\n          </Row>\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default ServiceCard;","import React from 'react';\nimport { Modal } from 'react-bootstrap';\n\nconst showStops = (service) => {\n  let stops =[];\n\n  if(+service.Dest1CallingPoints.$.NumCallingPoints > 1) {\n    stops = service.Dest1CallingPoints.CallingPoint.map((stop, index) => {\n        return (\n          <div key={index}>{stop.$.etarr} - {stop.$.Name}</div>\n        );\n      }\n    );\n  } else if(+service.Dest1CallingPoints.$.NumCallingPoints === 1) {\n    stops = [<div key=\"onlystop\">{service.Dest1CallingPoints.CallingPoint.$.etarr} - {service.Dest1CallingPoints.CallingPoint.$.Name}</div>];\n  }\n\n  stops.push(<div key=\"destination\">{service.Destination1.$.etarr} - {service.Destination1.$.name}</div>)\n\n  return stops;\n}\n\nconst ServiceModal = (props) => {\n  return (\n    <Modal show={props.show} onHide={props.onHide} centered>\n      <Modal.Header closeButton>\n        <Modal.Title>{props.service.Destination1.$.name}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {showStops(props.service)}\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nexport default ServiceModal;","// import { xml2json } from 'xml-js';\n\nexport const getStations = async () => {\n  let stationsArray;\n    // cors.io version - only use if cors.io is working\n    // await fetch(\"https://cors.io/?https://apis.opendatani.gov.uk/translink/\")\n    //   .then(results => {\n    //     return results.json();\n    //   })\n    //   .then(data => {\n    //     stationsArray = data.stations;\n    //   });\n\n    // Local proxy version - proxy must be running\n    // await fetch(\"/stations\")\n    //   .then(results => { return results.json(); })\n    //   .then(data => { stationsArray = data; });\n\n    // Heroku proxy version\n    await fetch(\"https://translink-proxy.herokuapp.com/stations\")\n      .then(results => { \n        if(results.ok) {\n          return results.json();\n        } else {\n          throw new Error('Some error');\n        } \n      })\n      .then(data => { stationsArray = data; })\n      .catch(error => stationsArray = []);\n\n    return stationsArray;\n}\n\nexport const getStationInformation = async (stationCode) => {\n  let stationInformation;\n\n  // cors.io version - only use if cors.io is working\n  // await fetch(\n  //   `https://cors.io/?https://apis.opendatani.gov.uk/translink/${stationCode}.xml`,\n  //   {\n  //     method: \"GET\",\n  //     headers: {\n  //       Accept: \"application/xml\"\n  //     }\n  //   }\n  // ).then(response => {\n  //     return response.text();\n  //   }\n  // ).then(xml => {\n  //     // console.log(xml);\n  //     stationInformation = JSON.parse(\n  //       xml2json(xml, {\n  //         compact: true,\n  //         textKey: \"_\",\n  //         attributesKey: \"$\",\n  //         commentKey: \"value\"\n  //       })\n  //     );\n  //   }\n  // );\n\n  // Local call (proxy must be running)\n  // await fetch(`/station/${stationCode}`)\n  //   .then(response => { return response.json() })\n  //   .then(stationInfo => { stationInformation = stationInfo });\n\n  // Heroku proxy version\n   await fetch(`https://translink-proxy.herokuapp.com/station/${stationCode}`)\n    .then(response => { return response.json() })\n    .then(stationInfo => { stationInformation = stationInfo });\n\n  return stationInformation;\n}","import React from 'react';\nimport { Modal, Spinner } from 'react-bootstrap';\n\nconst LoadingModal = (props) => {\n  return (\n    <Modal show={props.visible} centered>\n      <Modal.Body>\n        <div style={{ textAlign: \"center\" }}>\n          <Spinner animation=\"border\" variant=\"dark\"></Spinner>\n        </div>\n        <p style={{ textAlign: \"center\" }}>\n          Loading\n        </p>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nexport default LoadingModal;","import React from 'react';\nimport { Form, Row, Col, Button } from 'react-bootstrap';\n\nconst StationSelectForm = (props) => {\n  return (\n    <Form onSubmit={props.onSubmit}>\n      <Form.Group style={{ textAlign: \"center\" }}>\n        <Form.Label className=\"noTrains\">Get upcoming departures for...</Form.Label>\n        <Form.Control as=\"select\" onChange={props.onChange} required>\n          <option value=\"\">Please select...</option>\n          {props.stations.map((station, index) => {\n            return (\n              <option key={index} value={station.code}>{station.name}</option>\n            )\n          })}\n        </Form.Control>\n      </Form.Group>\n      <Row>\n        <Col />\n        <Col className=\"text-center\">\n          <Button variant=\"outline-dark\" type=\"submit\">Submit</Button>\n        </Col>\n        <Col />\n      </Row>\n    </Form>\n  )\n}\n\nexport default StationSelectForm;","import React, { Component } from \"react\";\nimport Header from './components/Header';\nimport { Container, Row, Col, Modal } from \"react-bootstrap\";\nimport ServiceCard from \"./components/ServiceCard\";\nimport ServiceModal from \"./components/ServiceModal\";\nimport { getStations, getStationInformation } from \"./services/stationServices\";\nimport LoadingModal from \"./components/LoadingModal\";\nimport StationSelectForm from \"./components/StationSelectForm\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stations: [],\n      selectedStation: \"None selected\",\n      stationInformation: \"\",\n      selectedService: null,\n      showStationModal: false,\n      showLoadingModal: true,\n      proxyDown: false\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.viewStops = this.viewStops.bind(this);\n    this.handleModalClose = this.handleModalClose.bind(this);\n  }\n\n  async componentDidMount() {\n    let stations = await getStations();\n\n    if(!stations.length) {\n      this.setState({\n        showLoadingModal: false,\n        proxyDown: true\n      });\n    } else {\n      this.setState({\n        stations: stations,\n        showLoadingModal: false\n      });\n    }\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    this.setState({ showLoadingModal: true });\n    const info = await getStationInformation(this.state.selectedStation);\n\n    this.setState({\n      stationInformation: info,\n      showLoadingModal: false\n    });\n  }\n\n  viewStops(selectedService) {\n    this.setState({ selectedService: selectedService });\n    this.setState({ showStationModal: true });\n  }\n\n  handleModalClose() {\n    this.setState({ showStationModal: false });\n  }\n\n  renderServices() {\n    let serviceElements;\n\n    if (this.state.stationInformation && this.state.stationInformation.StationBoard.Service) {\n      \n      const services = this.state.stationInformation.StationBoard.Service;\n\n      if(services.length) {\n        serviceElements = services.map((service, index) => {\n          return (\n            <ServiceCard key={index} service={service} onClick={this.viewStops} index={index} />\n          );\n        });\n      } else {\n        serviceElements = <ServiceCard index={0} service={services} onClick={this.viewStops} />\n      }      \n    } else {\n      serviceElements = <p className=\"noTrains\">No trains due here for at least 90min.</p>\n    }\n\n    return serviceElements;\n  }\n\n  handleChange(event) {\n    this.setState({ selectedStation: event.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <LoadingModal visible={this.state.showLoadingModal} />\n        <Modal show={this.state.proxyDown} centered>\n          <Modal.Header closeButton>\n            <Modal.Title>Error</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              This app uses a proxy hosted on a free Heroku service, which has a limit on how long it can run per month.\n            </p>\n            <p>\n              As this is just a side project for me and I'm a bit skint, I only use the free service, so it is likely that \n              the app will go down towards the end of the month.\n            </p>\n            <p>\n              You're seeing this error message because, in all likelihood, the proxy has reached the limit for the free tier and isn't running, so the app won't work.\n            </p>\n          </Modal.Body>\n        </Modal>\n        <Container>\n          <Row>\n            <Col md={{ span: 8, offset: 2 }}>\n              <StationSelectForm onChange={this.handleChange} onSubmit={this.handleSubmit} stations={this.state.stations} />\n            </Col>\n          </Row>\n          <Row>\n            <Col md={{ span: 8, offset: 2 }}>\n              {this.state.stationInformation.StationBoard && (\n                <div>{this.renderServices()}</div>\n              )}\n            </Col>\n          </Row>\n        </Container>\n        {this.state.selectedService &&\n          <ServiceModal service={this.state.selectedService} show={this.state.showStationModal} onHide={this.handleModalClose} />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}