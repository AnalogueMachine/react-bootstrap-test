{"version":3,"sources":["components/Header.jsx","components/ServiceCard.jsx","components/ServiceModal.jsx","services/stationServices.js","components/LoadingModal.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","ServiceCard","props","Card","style","margin","boxShadow","Body","Title","service","Destination1","$","name","Text","Origin1","ArriveTime","time","DepartTime","ServiceStatus","Status","Delay","Minutes","Platform","Number","Button","onClick","value","index","ServiceModal","Modal","show","onHide","centered","closeButton","stops","Dest1CallingPoints","NumCallingPoints","CallingPoint","map","stop","key","etarr","Name","push","showStops","getStations","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","stationsArray","wrap","_context","prev","next","fetch","then","results","json","data","abrupt","apply","this","arguments","getStationInformation","_ref2","_callee2","stationCode","stationInformation","_context2","concat","response","stationInfo","_x","LoadingModal","visible","Spinner","animation","variant","textAlign","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selectedStation","selectedService","showStationModal","showLoadingModal","handleChange","bind","assertThisInitialized","handleSubmit","viewStops","handleModalClose","stations","station","code","setState","event","preventDefault","info","StationBoard","Service","target","_this2","services","components_ServiceCard","components_Header","components_ServiceModal","components_LoadingModal","Container","Row","Col","md","span","offset","Form","onSubmit","Group","Label","Control","as","onChange","required","disabled","selected","hidden","type","renderServices","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61a1047c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar bg='light' expand='lg'>\r\n      <Navbar.Brand href='/'>Translink Train</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n      <Navbar.Collapse id='basic-navbar-nav'>\r\n        <Nav className='mr-auto'>\r\n          <Nav.Link href='https://github.com/HundredPercentCoverage'>GitHub</Nav.Link>\r\n          <Nav.Link href='http://twitter.com/'>Twitter</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\n\r\nconst ServiceCard = (props) => {\r\n  return (\r\n    <Card style={{ margin: \"10px 0 10px 0\", boxShadow: \"2px 4px 4px #888888\"}}>\r\n      <Card.Body>\r\n        <Card.Title>\r\n          Destination: {props.service.Destination1.$.name}\r\n        </Card.Title>\r\n        <Card.Text>\r\n          Origin: {props.service.Origin1.$.name}\r\n          <br />\r\n          Due: {props.service.ArriveTime.$.time}\r\n          <br />\r\n          Departing: {props.service.DepartTime.$.time}\r\n          <br />\r\n          Status: {props.service.ServiceStatus.$.Status}\r\n          <br />\r\n          Delay: {props.service.Delay.$.Minutes} minutes\r\n          <br />\r\n          Platform: {props.service.Platform.$.Number}\r\n          <br />\r\n        </Card.Text>\r\n        <Button onClick={props.onClick} value={props.index}>View Stops</Button>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ServiceCard;","import React from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nconst showStops = (service) => {\r\n  let stops =[];\r\n\r\n  if(+service.Dest1CallingPoints.$.NumCallingPoints > 1) {\r\n    stops = service.Dest1CallingPoints.CallingPoint.map((stop, index) => {\r\n        return (\r\n          <div key={index}>{stop.$.etarr} - {stop.$.Name}</div>\r\n        );\r\n      }\r\n    );\r\n  } else if(+service.Dest1CallingPoints.$.NumCallingPoints === 1) {\r\n    stops = [<div key=\"onlystop\">{service.Dest1CallingPoints.CallingPoint.$.etarr} - {service.Dest1CallingPoints.CallingPoint.$.Name}</div>];\r\n  }\r\n\r\n  stops.push(<div key=\"destination\">{service.Destination1.$.etarr} - {service.Destination1.$.name}</div>)\r\n\r\n  return stops;\r\n}\r\n\r\nconst ServiceModal = (props) => {\r\n  return (\r\n    <Modal show={props.show} onHide={props.onHide} centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{props.service.Destination1.$.name}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {showStops(props.service)}\r\n      </Modal.Body>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ServiceModal;","// import { xml2json } from 'xml-js';\r\n\r\nexport const getStations = async () => {\r\n  let stationsArray;\r\n    // cors.io version - only use if cors.io is working\r\n    // await fetch(\"https://cors.io/?https://apis.opendatani.gov.uk/translink/\")\r\n    //   .then(results => {\r\n    //     return results.json();\r\n    //   })\r\n    //   .then(data => {\r\n    //     stationsArray = data.stations;\r\n    //   });\r\n\r\n    // Lroxy version - proxy must be running\r\n    // await fetch(\"/stations\")\r\n    //   .then(results => { return results.json(); })\r\n    //   .then(data => { stationsArray = data; });\r\n\r\n    // Heroku proxy version\r\n    await fetch(\"https://translink-proxy.herokuapp.com/stations\")\r\n      .then(results => { return results.json(); })\r\n      .then(data => { stationsArray = data; });\r\n\r\n    return stationsArray;\r\n}\r\n\r\nexport const getStationInformation = async (stationCode) => {\r\n  let stationInformation;\r\n\r\n  // cors.io version - only use if cors.io is working\r\n  // await fetch(\r\n  //   `https://cors.io/?https://apis.opendatani.gov.uk/translink/${stationCode}.xml`,\r\n  //   {\r\n  //     method: \"GET\",\r\n  //     headers: {\r\n  //       Accept: \"application/xml\"\r\n  //     }\r\n  //   }\r\n  // ).then(response => {\r\n  //     return response.text();\r\n  //   }\r\n  // ).then(xml => {\r\n  //     // console.log(xml);\r\n  //     stationInformation = JSON.parse(\r\n  //       xml2json(xml, {\r\n  //         compact: true,\r\n  //         textKey: \"_\",\r\n  //         attributesKey: \"$\",\r\n  //         commentKey: \"value\"\r\n  //       })\r\n  //     );\r\n  //   }\r\n  // );\r\n\r\n  // Local call (proxy must be running)\r\n  // await fetch(`/station/${stationCode}`)\r\n  //   .then(response => { return response.json() })\r\n  //   .then(stationInfo => { stationInformation = stationInfo });\r\n\r\n  // Heroku proxy version\r\n   await fetch(`https://translink-proxy.herokuapp.com/station/${stationCode}`)\r\n    .then(response => { return response.json() })\r\n    .then(stationInfo => { stationInformation = stationInfo });\r\n\r\n  return stationInformation;\r\n}","import React from 'react';\r\nimport { Modal, Spinner, Row, Col } from 'react-bootstrap';\r\n\r\nconst LoadingModal = (props) => {\r\n  return (\r\n    <Modal show={props.visible} centered>\r\n      <Modal.Body>\r\n        <Spinner animation=\"border\" variant=\"primary\"></Spinner>\r\n        <p style={{ textAlign: \"center\" }}>\r\n          Loading\r\n        </p>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default LoadingModal;","import React, { Component } from \"react\";\r\nimport Header from './components/Header';\r\nimport { Form, Button, Container, Row, Col } from \"react-bootstrap\";\r\nimport ServiceCard from \"./components/ServiceCard\";\r\nimport ServiceModal from \"./components/ServiceModal\";\r\nimport { getStations, getStationInformation } from \"./services/stationServices\";\r\nimport LoadingModal from \"./components/LoadingModal\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectedStation: \"None selected\",\r\n      stationInformation: \"\",\r\n      selectedService: null,\r\n      showStationModal: false,\r\n      showLoadingModal: true\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.viewStops = this.viewStops.bind(this);\r\n    this.handleModalClose = this.handleModalClose.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let stations = await getStations(); // Try this with GH Pages\r\n    stations = await stations.map((station, index) => {\r\n      return (\r\n        <option key={index} value={station.code}>\r\n          {station.name}\r\n        </option>\r\n      );\r\n    });\r\n\r\n    this.setState({\r\n      stations: stations,\r\n      showLoadingModal: false\r\n    });\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.setState({ showLoadingModal: true });\r\n    const info = await getStationInformation(this.state.selectedStation);\r\n\r\n    this.setState({\r\n      stationInformation: info,\r\n      showLoadingModal: false\r\n    });\r\n  }\r\n\r\n  viewStops(event) {\r\n    this.setState({ selectedService: this.state.stationInformation.StationBoard.Service[event.target.value] });\r\n    this.setState({ showStationModal: true });\r\n  }\r\n\r\n  handleModalClose() {\r\n    this.setState({ showStationModal: false });\r\n  }\r\n\r\n  renderServices() {\r\n    const services = this.state.stationInformation.StationBoard.Service;\r\n    let serviceElements;\r\n\r\n    if (services) {\r\n      serviceElements = services.map((service, index) => {\r\n        return (\r\n          <ServiceCard key={index} service={service} onClick={this.viewStops} index={index} />\r\n        );\r\n      });\r\n    } else {\r\n      serviceElements = <p className=\"noTrains\">No trains due here for at least 90min.</p>\r\n    }\r\n\r\n    return serviceElements;\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ selectedStation: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        {this.state.selectedService &&\r\n          <ServiceModal service={this.state.selectedService} show={this.state.showStationModal} onHide={this.handleModalClose} />\r\n        }\r\n        <LoadingModal visible={this.state.showLoadingModal} />\r\n        <Container>\r\n          <Row>\r\n            <Col md={{ span: 8, offset: 2 }}>\r\n              <Form onSubmit={this.handleSubmit}>\r\n                <Form.Group style={{ textAlign: \"center\" }}>\r\n                  <Form.Label>Choose your station...</Form.Label>\r\n                  <Form.Control as=\"select\" onChange={this.handleChange} required>\r\n                    <option disabled selected hidden>Please select...</option>\r\n                    {this.state.stations}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n                <Row>\r\n                  <Col />\r\n                  <Col className=\"text-center\">\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                      Submit\r\n                    </Button>\r\n                  </Col>\r\n                  <Col />\r\n                </Row>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 8, offset: 2 }}>\r\n              {this.state.stationInformation.StationBoard && (\r\n                <div>{this.renderServices()}</div>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}